### YamlMime:ManagedReference
items:
- uid: Talegen.Storage.Net.Tests.StorageTestsBase
  commentId: T:Talegen.Storage.Net.Tests.StorageTestsBase
  id: StorageTestsBase
  parent: Talegen.Storage.Net.Tests
  children:
  - Talegen.Storage.Net.Tests.StorageTestsBase.#ctor(Talegen.Storage.Net.Core.IStorageContext)
  - Talegen.Storage.Net.Tests.StorageTestsBase.#ctor(Talegen.Storage.Net.Core.IStorageService)
  - Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests
  - Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests(System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests(System.String,System.Boolean,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests
  - Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests(System.String,System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests(System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests(System.String,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests(System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests(System.String,System.String,System.IO.SearchOption,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests(System.String,System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests(System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests(System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests(System.String,System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests
  - Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests(System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests(System.String,System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: StorageTestsBase
  nameWithType: StorageTestsBase
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase
  type: Class
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: StorageTestsBase
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 31
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nThis class contains unit tests for exercising the storage service.\n"
  example: []
  syntax:
    content: 'public abstract class StorageTestsBase : UnitTestBase'
    content.vb: >-
      Public MustInherit Class StorageTestsBase
          Inherits UnitTestBase
  seealso:
  - linkId: Talegen.Storage.Net.Tests.UnitTestBase
    commentId: T:Talegen.Storage.Net.Tests.UnitTestBase
  inheritance:
  - System.Object
  - Talegen.Storage.Net.Tests.UnitTestBase
  derivedClasses:
  - Talegen.Storage.Net.Tests.DiskStorageTests
  - Talegen.Storage.Net.Tests.MemoryStorageTests
  inheritedMembers:
  - Talegen.Storage.Net.Tests.UnitTestBase.StorageContext
  - Talegen.Storage.Net.Tests.UnitTestBase.StorageService
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.#ctor(Talegen.Storage.Net.Core.IStorageService)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.#ctor(Talegen.Storage.Net.Core.IStorageService)
  id: '#ctor(Talegen.Storage.Net.Core.IStorageService)'
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: StorageTestsBase(IStorageService)
  nameWithType: StorageTestsBase.StorageTestsBase(IStorageService)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.StorageTestsBase(Talegen.Storage.Net.Core.IStorageService)
  type: Constructor
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: .ctor
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 82
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nInitializes a new instance of the <xref href=\"Talegen.Storage.Net.Tests.StorageTestsBase\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public StorageTestsBase(IStorageService storageService)
    parameters:
    - id: storageService
      type: Talegen.Storage.Net.Core.IStorageService
      description: The storage service.
    content.vb: Public Sub New(storageService As IStorageService)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.#ctor(Talegen.Storage.Net.Core.IStorageContext)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.#ctor(Talegen.Storage.Net.Core.IStorageContext)
  id: '#ctor(Talegen.Storage.Net.Core.IStorageContext)'
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: StorageTestsBase(IStorageContext)
  nameWithType: StorageTestsBase.StorageTestsBase(IStorageContext)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.StorageTestsBase(Talegen.Storage.Net.Core.IStorageContext)
  type: Constructor
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: .ctor
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 91
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nInitializes a new instance of the <xref href=\"Talegen.Storage.Net.Tests.StorageTestsBase\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public StorageTestsBase(IStorageContext storageContext)
    parameters:
    - id: storageContext
      type: Talegen.Storage.Net.Core.IStorageContext
      description: The storage context.
    content.vb: Public Sub New(storageContext As IStorageContext)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests
  id: CleanupTests
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: CleanupTests()
  nameWithType: StorageTestsBase.CleanupTests()
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests()
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: CleanupTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 99
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nCleanups the tests.\n"
  example: []
  syntax:
    content: public virtual void CleanupTests()
    content.vb: Public Overridable Sub CleanupTests
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests
  id: VerifyPathTests
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: VerifyPathTests()
  nameWithType: StorageTestsBase.VerifyPathTests()
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests()
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: VerifyPathTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 106
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nVerifies the root path tests.\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void VerifyPathTests()
    content.vb: >-
      <Fact>

      Public Sub VerifyPathTests
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests(System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests(System.String,System.Boolean,System.Boolean)
  id: CreateDirectoryTests(System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: CreateDirectoryTests(String, Boolean, Boolean)
  nameWithType: StorageTestsBase.CreateDirectoryTests(String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: CreateDirectoryTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 124
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nCreate directory tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, false, false})]

      [InlineData(new object[]{"new", true, true})]

      [InlineData(new object[]{"Existing", false, false})]

      public void CreateDirectoryTests(string folderName, bool silentExists, bool expectSuccess)
    parameters:
    - id: folderName
      type: System.String
      description: Name of the folder.
    - id: silentExists
      type: System.Boolean
      description: if set to <code>true</code> [silent exists].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, False, False})>

      <InlineData(New Object() {"new", True, True})>

      <InlineData(New Object() {"Existing", False, False})>

      Public Sub CreateDirectoryTests(folderName As String, silentExists As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests(System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests(System.String,System.Boolean,System.Boolean,System.Boolean)
  id: DeleteDirectoryTests(System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: DeleteDirectoryTests(String, Boolean, Boolean, Boolean)
  nameWithType: StorageTestsBase.DeleteDirectoryTests(String, Boolean, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests(System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DeleteDirectoryTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 163
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nDelete directory tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, false, false, false})]

      [InlineData(new object[]{"Nonexisting", true, false, false})]

      [InlineData(new object[]{"Existing", true, false, true})]

      [InlineData(new object[]{"Existing", false, true, false})]

      public void DeleteDirectoryTests(string folderName, bool recursive, bool silentNoExist, bool expectSuccess)
    parameters:
    - id: folderName
      type: System.String
      description: Name of the folder.
    - id: recursive
      type: System.Boolean
      description: if set to <code>true</code> [recursive].
    - id: silentNoExist
      type: System.Boolean
      description: if set to <code>true</code> [silent no exist].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, False, False, False})>

      <InlineData(New Object() {"Nonexisting", True, False, False})>

      <InlineData(New Object() {"Existing", True, False, True})>

      <InlineData(New Object() {"Existing", False, True, False})>

      Public Sub DeleteDirectoryTests(folderName As String, recursive As Boolean, silentNoExist As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests(System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests(System.String,System.String,System.Boolean,System.Boolean)
  id: DeleteFileTests(System.String,System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: DeleteFileTests(String, String, Boolean, Boolean)
  nameWithType: StorageTestsBase.DeleteFileTests(String, String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests(System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DeleteFileTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 212
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nDelete file tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"Existing", null, false, false})]

      [InlineData(new object[]{"Existing", "alpha.txt", false, true})]

      [InlineData(new object[]{"Nonexisting", "alpha.txt", false, false})]

      [InlineData(new object[]{"Existing\\SubFolder", "beta.txt", true, false})]

      [InlineData(new object[]{"Existing\\DeltaFolder", "delta.txt", true, true})]

      public void DeleteFileTests(string targetFolderName, string targetFileName, bool deleteDirectory, bool expectSuccess)
    parameters:
    - id: targetFolderName
      type: System.String
      description: Name of the target folder.
    - id: targetFileName
      type: System.String
      description: Name of the target file.
    - id: deleteDirectory
      type: System.Boolean
      description: if set to <code>true</code> [delete directory].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"Existing", Nothing, False, False})>

      <InlineData(New Object() {"Existing", "alpha.txt", False, True})>

      <InlineData(New Object() {"Nonexisting", "alpha.txt", False, False})>

      <InlineData(New Object() {"Existing\SubFolder", "beta.txt", True, False})>

      <InlineData(New Object() {"Existing\DeltaFolder", "delta.txt", True, True})>

      Public Sub DeleteFileTests(targetFolderName As String, targetFileName As String, deleteDirectory As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests
  id: DeleteFilesTests
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: DeleteFilesTests()
  nameWithType: StorageTestsBase.DeleteFilesTests()
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests()
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DeleteFilesTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 267
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nDelete files tests.\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void DeleteFilesTests()
    content.vb: >-
      <Fact>

      Public Sub DeleteFilesTests
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests(System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests(System.String,System.Boolean,System.Boolean)
  id: DirectoryExistTests(System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: DirectoryExistTests(String, Boolean, Boolean)
  nameWithType: StorageTestsBase.DirectoryExistTests(String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DirectoryExistTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 325
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nDirectory exists tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, false, false})]

      [InlineData(new object[]{"Nonexisting", false, true})]

      [InlineData(new object[]{"Existing", true, true})]

      public void DirectoryExistTests(string targetFolderName, bool expectedValue, bool expectSuccess)
    parameters:
    - id: targetFolderName
      type: System.String
      description: Name of the target folder.
    - id: expectedValue
      type: System.Boolean
      description: if set to <code>true</code> [expected value].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, False, False})>

      <InlineData(New Object() {"Nonexisting", False, True})>

      <InlineData(New Object() {"Existing", True, True})>

      Public Sub DirectoryExistTests(targetFolderName As String, expectedValue As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests(System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests(System.String,System.Boolean,System.Boolean)
  id: FileExistTests(System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: FileExistTests(String, Boolean, Boolean)
  nameWithType: StorageTestsBase.FileExistTests(String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: FileExistTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 356
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nFile exists tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, false, false})]

      [InlineData(new object[]{"Existing\\alpha.txt", true, true})]

      [InlineData(new object[]{"Existing\\gamma.txt", false, true})]

      public void FileExistTests(string targetFilePath, bool expectedValue, bool expectSuccess)
    parameters:
    - id: targetFilePath
      type: System.String
      description: The target file path.
    - id: expectedValue
      type: System.Boolean
      description: if set to <code>true</code> [expected value].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, False, False})>

      <InlineData(New Object() {"Existing\alpha.txt", True, True})>

      <InlineData(New Object() {"Existing\gamma.txt", False, True})>

      Public Sub FileExistTests(targetFilePath As String, expectedValue As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests(System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests(System.String,System.Boolean)
  id: EmptyDirectoryTests(System.String,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: EmptyDirectoryTests(String, Boolean)
  nameWithType: StorageTestsBase.EmptyDirectoryTests(String, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: EmptyDirectoryTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 387
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nEmpty directory tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, false})]

      [InlineData(new object[]{"Existing", true})]

      [InlineData(new object[]{"Nonexisting", false})]

      public void EmptyDirectoryTests(string targetFolderName, bool expectSuccess)
    parameters:
    - id: targetFolderName
      type: System.String
      description: Name of the target folder.
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, False})>

      <InlineData(New Object() {"Existing", True})>

      <InlineData(New Object() {"Nonexisting", False})>

      Public Sub EmptyDirectoryTests(targetFolderName As String, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests(System.String,System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests(System.String,System.String,System.String,System.Boolean)
  id: HashFileTests(System.String,System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: HashFileTests(String, String, String, Boolean)
  nameWithType: StorageTestsBase.HashFileTests(String, String, String, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests(System.String, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: HashFileTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 428
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nHash file tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "", "", false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "test", "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08", true})]

      [InlineData(new object[]{"Nonexisting\\alpha.txt", "", "", false})]

      public void HashFileTests(string targetFilePath, string contents, string expectedValue, bool expectSuccess)
    parameters:
    - id: targetFilePath
      type: System.String
      description: The target file path.
    - id: contents
      type: System.String
      description: The contents.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "", "", False})>

      <InlineData(New Object() {"Existing\alpha.txt", "test", "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08", True})>

      <InlineData(New Object() {"Nonexisting\alpha.txt", "", "", False})>

      Public Sub HashFileTests(targetFilePath As String, contents As String, expectedValue As String, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests(System.String,System.String,System.IO.SearchOption,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests(System.String,System.String,System.IO.SearchOption,System.Boolean,System.Boolean)
  id: FindFilesTests(System.String,System.String,System.IO.SearchOption,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: FindFilesTests(String, String, SearchOption, Boolean, Boolean)
  nameWithType: StorageTestsBase.FindFilesTests(String, String, SearchOption, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests(System.String, System.String, System.IO.SearchOption, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: FindFilesTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 466
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nFind files tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "", SearchOption.AllDirectories, false, false})]

      [InlineData(new object[]{"Existing", "*.*", SearchOption.AllDirectories, true, true})]

      [InlineData(new object[]{"Nonexisting", "*.*", SearchOption.AllDirectories, false, false})]

      [InlineData(new object[]{"Existing\\SubFolder", "*.txt", SearchOption.AllDirectories, true, true})]

      [InlineData(new object[]{"Existing\\SubFolder", "*.nothing", SearchOption.AllDirectories, false, true})]

      public void FindFilesTests(string searchPathName, string searchPattern, SearchOption options, bool expectResults, bool expectSuccess)
    parameters:
    - id: searchPathName
      type: System.String
      description: Name of the search path.
    - id: searchPattern
      type: System.String
      description: The search pattern.
    - id: options
      type: System.IO.SearchOption
      description: The options.
    - id: expectResults
      type: System.Boolean
      description: if set to <code>true</code> [expect results].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "", SearchOption.AllDirectories, False, False})>

      <InlineData(New Object() {"Existing", "*.*", SearchOption.AllDirectories, True, True})>

      <InlineData(New Object() {"Nonexisting", "*.*", SearchOption.AllDirectories, False, False})>

      <InlineData(New Object() {"Existing\SubFolder", "*.txt", SearchOption.AllDirectories, True, True})>

      <InlineData(New Object() {"Existing\SubFolder", "*.nothing", SearchOption.AllDirectories, False, True})>

      Public Sub FindFilesTests(searchPathName As String, searchPattern As String, options As SearchOption, expectResults As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  id: CopyFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: CopyFileTests(String, String, String, Boolean, Boolean)
  nameWithType: StorageTestsBase.CopyFileTests(String, String, String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests(System.String, System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: CopyFileTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 518
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nMove file tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "Existing", "", false, false})]

      [InlineData(new object[]{"Existing", null, "", false, false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\DeltaFolder", "Existing\\DeltaFolder\\alpha.txt", false, true})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\DeltaFolder\\delta.txt", "Existing\\DeltaFolder\\delta.txt", false, true})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Nonexisting\\DeltaFolder", "Nonexisting\\DeltaFolder\\alpha.txt", false, true})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\alpha.txt", "", false, false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\SubFolder\\beta.txt", "", false, false})]

      public void CopyFileTests(string sourcePathName, string targetFolderName, string expectedValue, bool overwrite, bool expectSuccess)
    parameters:
    - id: sourcePathName
      type: System.String
      description: Name of the source path.
    - id: targetFolderName
      type: System.String
      description: Name of the target folder.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: overwrite
      type: System.Boolean
      description: if set to <code>true</code> [overwrite].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "Existing", "", False, False})>

      <InlineData(New Object() {"Existing", Nothing, "", False, False})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\DeltaFolder", "Existing\DeltaFolder\alpha.txt", False, True})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\DeltaFolder\delta.txt", "Existing\DeltaFolder\delta.txt", False, True})>

      <InlineData(New Object() {"Existing\alpha.txt", "Nonexisting\DeltaFolder", "Nonexisting\DeltaFolder\alpha.txt", False, True})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\alpha.txt", "", False, False})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\SubFolder\beta.txt", "", False, False})>

      Public Sub CopyFileTests(sourcePathName As String, targetFolderName As String, expectedValue As String, overwrite As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  id: MoveFileTests(System.String,System.String,System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: MoveFileTests(String, String, String, Boolean, Boolean)
  nameWithType: StorageTestsBase.MoveFileTests(String, String, String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests(System.String, System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: MoveFileTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 572
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nMove file tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "Existing", "", false, false})]

      [InlineData(new object[]{"Existing", null, "", false, false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\DeltaFolder", "Existing\\DeltaFolder\\alpha.txt", false, true})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\DeltaFolder\\delta.txt", "Existing\\DeltaFolder\\delta.txt", false, true})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Nonexisting\\DeltaFolder", "Nonexisting\\DeltaFolder\\alpha.txt", false, true})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\alpha.txt", "", false, false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "Existing\\SubFolder\\beta.txt", "", false, false})]

      public void MoveFileTests(string sourcePathName, string targetFolderName, string expectedValue, bool overwrite, bool expectSuccess)
    parameters:
    - id: sourcePathName
      type: System.String
      description: Name of the source path.
    - id: targetFolderName
      type: System.String
      description: Name of the target folder.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: overwrite
      type: System.Boolean
      description: if set to <code>true</code> [overwrite].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "Existing", "", False, False})>

      <InlineData(New Object() {"Existing", Nothing, "", False, False})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\DeltaFolder", "Existing\DeltaFolder\alpha.txt", False, True})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\DeltaFolder\delta.txt", "Existing\DeltaFolder\delta.txt", False, True})>

      <InlineData(New Object() {"Existing\alpha.txt", "Nonexisting\DeltaFolder", "Nonexisting\DeltaFolder\alpha.txt", False, True})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\alpha.txt", "", False, False})>

      <InlineData(New Object() {"Existing\alpha.txt", "Existing\SubFolder\beta.txt", "", False, False})>

      Public Sub MoveFileTests(sourcePathName As String, targetFolderName As String, expectedValue As String, overwrite As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests(System.String,System.String,System.Boolean)
  id: ReadBinaryFileTests(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: ReadBinaryFileTests(String, String, Boolean)
  nameWithType: StorageTestsBase.ReadBinaryFileTests(String, String, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: ReadBinaryFileTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 624
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nRead binary file tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "", false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "test", true})]

      [InlineData(new object[]{"Nonexisting\\alpha.txt", "", false})]

      public void ReadBinaryFileTests(string sourceFilePath, string expectedValue, bool expectSuccess)
    parameters:
    - id: sourceFilePath
      type: System.String
      description: The source file path.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "", False})>

      <InlineData(New Object() {"Existing\alpha.txt", "test", True})>

      <InlineData(New Object() {"Nonexisting\alpha.txt", "", False})>

      Public Sub ReadBinaryFileTests(sourceFilePath As String, expectedValue As String, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests(System.String,System.String,System.Boolean)
  id: ReadBinaryFileStreamTests(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: ReadBinaryFileStreamTests(String, String, Boolean)
  nameWithType: StorageTestsBase.ReadBinaryFileStreamTests(String, String, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: ReadBinaryFileStreamTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 661
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nRead binary file stream tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "", false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "test", true})]

      [InlineData(new object[]{"Nonexisting\\alpha.txt", "", false})]

      public void ReadBinaryFileStreamTests(string sourceFilePath, string expectedValue, bool expectSuccess)
    parameters:
    - id: sourceFilePath
      type: System.String
      description: The source file path.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "", False})>

      <InlineData(New Object() {"Existing\alpha.txt", "test", True})>

      <InlineData(New Object() {"Nonexisting\alpha.txt", "", False})>

      Public Sub ReadBinaryFileStreamTests(sourceFilePath As String, expectedValue As String, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests(System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests(System.String,System.String,System.Boolean,System.Boolean)
  id: ReadTextFileTests(System.String,System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: ReadTextFileTests(String, String, Boolean, Boolean)
  nameWithType: StorageTestsBase.ReadTextFileTests(String, String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests(System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: ReadTextFileTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 703
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nRead text file tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "", false, false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "test", true, true})]

      [InlineData(new object[]{"Existing\\alpha.txt", "test", false, true})]

      [InlineData(new object[]{"Nonexisting\\alpha.txt", "", false, false})]

      public void ReadTextFileTests(string sourceFilePath, string expectedValue, bool utf8, bool expectSuccess)
    parameters:
    - id: sourceFilePath
      type: System.String
      description: The source file path.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: utf8
      type: System.Boolean
      description: if set to <code>true</code> [UTF8].
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "", False, False})>

      <InlineData(New Object() {"Existing\alpha.txt", "test", True, True})>

      <InlineData(New Object() {"Existing\alpha.txt", "test", False, True})>

      <InlineData(New Object() {"Nonexisting\alpha.txt", "", False, False})>

      Public Sub ReadTextFileTests(sourceFilePath As String, expectedValue As String, utf8 As Boolean, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests(System.String,System.String,System.Boolean)
  id: WriteBinaryFileTests(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: WriteBinaryFileTests(String, String, Boolean)
  nameWithType: StorageTestsBase.WriteBinaryFileTests(String, String, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: WriteBinaryFileTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 743
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nWrite binary file tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "", false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "test", true})]

      [InlineData(new object[]{"Nonexisting\\alpha.txt", "", true})]

      [InlineData(new object[]{"Existing\\DeltaFolder\\delta.txt", "test", true})]

      public void WriteBinaryFileTests(string targetFilePath, string expectedValue, bool expectSuccess)
    parameters:
    - id: targetFilePath
      type: System.String
      description: The target file path.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "", False})>

      <InlineData(New Object() {"Existing\alpha.txt", "test", True})>

      <InlineData(New Object() {"Nonexisting\alpha.txt", "", True})>

      <InlineData(New Object() {"Existing\DeltaFolder\delta.txt", "test", True})>

      Public Sub WriteBinaryFileTests(targetFilePath As String, expectedValue As String, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests(System.String,System.String,System.Boolean)
  id: WriteBinaryFileStreamTests(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.Tests.StorageTestsBase
  langs:
  - csharp
  - vb
  name: WriteBinaryFileStreamTests(String, String, Boolean)
  nameWithType: StorageTestsBase.WriteBinaryFileStreamTests(String, String, Boolean)
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.Tests/StorageTestsBase.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: WriteBinaryFileStreamTests
    path: ../Talegen.Storage.Net.Tests/StorageTestsBase.cs
    startLine: 784
  assemblies:
  - Talegen.Storage.Net.Tests
  namespace: Talegen.Storage.Net.Tests
  summary: "\nWrite binary file stream tests.\n"
  example: []
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null, "", false})]

      [InlineData(new object[]{"Existing\\alpha.txt", "test", true})]

      [InlineData(new object[]{"Nonexisting\\alpha.txt", "", true})]

      [InlineData(new object[]{"Existing\\DeltaFolder\\delta.txt", "test", true})]

      public void WriteBinaryFileStreamTests(string targetFilePath, string expectedValue, bool expectSuccess)
    parameters:
    - id: targetFilePath
      type: System.String
      description: The target file path.
    - id: expectedValue
      type: System.String
      description: The expected value.
    - id: expectSuccess
      type: System.Boolean
      description: if set to <code>true</code> [expect success].
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing, "", False})>

      <InlineData(New Object() {"Existing\alpha.txt", "test", True})>

      <InlineData(New Object() {"Nonexisting\alpha.txt", "", True})>

      <InlineData(New Object() {"Existing\DeltaFolder\delta.txt", "test", True})>

      Public Sub WriteBinaryFileStreamTests(targetFilePath As String, expectedValue As String, expectSuccess As Boolean)
  overload: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Talegen.Storage.Net.Tests.UnitTestBase
  commentId: T:Talegen.Storage.Net.Tests.UnitTestBase
  parent: Talegen.Storage.Net.Tests
  name: UnitTestBase
  nameWithType: UnitTestBase
  fullName: Talegen.Storage.Net.Tests.UnitTestBase
- uid: Talegen.Storage.Net.Tests
  commentId: N:Talegen.Storage.Net.Tests
  name: Talegen.Storage.Net.Tests
  nameWithType: Talegen.Storage.Net.Tests
  fullName: Talegen.Storage.Net.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Talegen.Storage.Net.Tests.UnitTestBase.StorageContext
  commentId: P:Talegen.Storage.Net.Tests.UnitTestBase.StorageContext
  parent: Talegen.Storage.Net.Tests.UnitTestBase
  name: StorageContext
  nameWithType: UnitTestBase.StorageContext
  fullName: Talegen.Storage.Net.Tests.UnitTestBase.StorageContext
- uid: Talegen.Storage.Net.Tests.UnitTestBase.StorageService
  commentId: P:Talegen.Storage.Net.Tests.UnitTestBase.StorageService
  parent: Talegen.Storage.Net.Tests.UnitTestBase
  name: StorageService
  nameWithType: UnitTestBase.StorageService
  fullName: Talegen.Storage.Net.Tests.UnitTestBase.StorageService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Talegen.Storage.Net.Tests.StorageTestsBase
  commentId: T:Talegen.Storage.Net.Tests.StorageTestsBase
  parent: Talegen.Storage.Net.Tests
  name: StorageTestsBase
  nameWithType: StorageTestsBase
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.#ctor*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.#ctor
  name: StorageTestsBase
  nameWithType: StorageTestsBase.StorageTestsBase
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.StorageTestsBase
- uid: Talegen.Storage.Net.Core.IStorageService
  commentId: T:Talegen.Storage.Net.Core.IStorageService
  parent: Talegen.Storage.Net.Core
  name: IStorageService
  nameWithType: IStorageService
  fullName: Talegen.Storage.Net.Core.IStorageService
- uid: Talegen.Storage.Net.Core
  commentId: N:Talegen.Storage.Net.Core
  name: Talegen.Storage.Net.Core
  nameWithType: Talegen.Storage.Net.Core
  fullName: Talegen.Storage.Net.Core
- uid: Talegen.Storage.Net.Core.IStorageContext
  commentId: T:Talegen.Storage.Net.Core.IStorageContext
  parent: Talegen.Storage.Net.Core
  name: IStorageContext
  nameWithType: IStorageContext
  fullName: Talegen.Storage.Net.Core.IStorageContext
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests
  name: CleanupTests
  nameWithType: StorageTestsBase.CleanupTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.CleanupTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests
  name: VerifyPathTests
  nameWithType: StorageTestsBase.VerifyPathTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.VerifyPathTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests
  name: CreateDirectoryTests
  nameWithType: StorageTestsBase.CreateDirectoryTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.CreateDirectoryTests
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests
  name: DeleteDirectoryTests
  nameWithType: StorageTestsBase.DeleteDirectoryTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteDirectoryTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests
  name: DeleteFileTests
  nameWithType: StorageTestsBase.DeleteFileTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFileTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests
  name: DeleteFilesTests
  nameWithType: StorageTestsBase.DeleteFilesTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DeleteFilesTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests
  name: DirectoryExistTests
  nameWithType: StorageTestsBase.DirectoryExistTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.DirectoryExistTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests
  name: FileExistTests
  nameWithType: StorageTestsBase.FileExistTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.FileExistTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests
  name: EmptyDirectoryTests
  nameWithType: StorageTestsBase.EmptyDirectoryTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.EmptyDirectoryTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests
  name: HashFileTests
  nameWithType: StorageTestsBase.HashFileTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.HashFileTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests
  name: FindFilesTests
  nameWithType: StorageTestsBase.FindFilesTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.FindFilesTests
- uid: System.IO.SearchOption
  commentId: T:System.IO.SearchOption
  parent: System.IO
  isExternal: true
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests
  name: CopyFileTests
  nameWithType: StorageTestsBase.CopyFileTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.CopyFileTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests
  name: MoveFileTests
  nameWithType: StorageTestsBase.MoveFileTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.MoveFileTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests
  name: ReadBinaryFileTests
  nameWithType: StorageTestsBase.ReadBinaryFileTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests
  name: ReadBinaryFileStreamTests
  nameWithType: StorageTestsBase.ReadBinaryFileStreamTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.ReadBinaryFileStreamTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests
  name: ReadTextFileTests
  nameWithType: StorageTestsBase.ReadTextFileTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.ReadTextFileTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests
  name: WriteBinaryFileTests
  nameWithType: StorageTestsBase.WriteBinaryFileTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileTests
- uid: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests*
  commentId: Overload:Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests
  name: WriteBinaryFileStreamTests
  nameWithType: StorageTestsBase.WriteBinaryFileStreamTests
  fullName: Talegen.Storage.Net.Tests.StorageTestsBase.WriteBinaryFileStreamTests
