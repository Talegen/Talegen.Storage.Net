### YamlMime:ManagedReference
items:
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  commentId: T:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  id: AzureBlobStorageService
  parent: Talegen.Storage.Net.AzureBlobs
  children:
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(System.Uri,System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile(System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory(System.String,System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile(System.String,System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists(System.String)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory(System.String)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists(System.String)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash(System.String)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile(System.String,System.String,System.Boolean)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String,System.IO.Stream)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile(System.String,System.Text.Encoding)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String,System.Byte[])
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String,System.IO.Stream)
  - Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
  langs:
  - csharp
  - vb
  name: AzureBlobStorageService
  nameWithType: AzureBlobStorageService
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  type: Class
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: AzureBlobStorageService
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 33
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis class implements the storage interface for implementing file IO with the Azure Blob File Shares.\n"
  example: []
  syntax:
    content: 'public class AzureBlobStorageService : IStorageService'
    content.vb: >-
      Public Class AzureBlobStorageService
          Implements IStorageService
  inheritance:
  - System.Object
  implements:
  - Talegen.Storage.Net.Core.IStorageService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(System.Uri,System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(System.Uri,System.String,System.String,System.Boolean)
  id: '#ctor(System.Uri,System.String,System.String,System.Boolean)'
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: AzureBlobStorageService(Uri, String, String, Boolean)
  nameWithType: AzureBlobStorageService.AzureBlobStorageService(Uri, String, String, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.AzureBlobStorageService(System.Uri, System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: .ctor
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 57
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nInitializes a new instance of the <xref href=\"Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public AzureBlobStorageService(Uri blobEndpointUri, string accountName, string accountKey, bool uniqueWorkspace = false)
    parameters:
    - id: blobEndpointUri
      type: System.Uri
      description: The BLOB endpoint URI.
    - id: accountName
      type: System.String
      description: Name of the account.
    - id: accountKey
      type: System.String
      description: The account key.
    - id: uniqueWorkspace
      type: System.Boolean
      description: Contains a value indicating whether the storage service shall use a unique workspace sub-folder.
    content.vb: Public Sub New(blobEndpointUri As Uri, accountName As String, accountKey As String, uniqueWorkspace As Boolean = False)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: AzureBlobStorageService(String, String, Boolean)
  nameWithType: AzureBlobStorageService.AzureBlobStorageService(String, String, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.AzureBlobStorageService(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: .ctor
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 68
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nInitializes a new instance of the <xref href=\"Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public AzureBlobStorageService(string connectionString, string accountName, bool uniqueWorkspace = false)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string.
    - id: accountName
      type: System.String
      description: Name of the account.
    - id: uniqueWorkspace
      type: System.Boolean
      description: Contains a value indicating whether the storage service shall use a unique workspace sub-folder.
    content.vb: Public Sub New(connectionString As String, accountName As String, uniqueWorkspace As Boolean = False)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  id: '#ctor(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)'
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: AzureBlobStorageService(AzureBlobStorageContext)
  nameWithType: AzureBlobStorageService.AzureBlobStorageService(AzureBlobStorageContext)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.AzureBlobStorageService(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  type: Constructor
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: .ctor
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 77
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nInitializes a new instance of the <xref href=\"Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public AzureBlobStorageService(AzureBlobStorageContext storageContext)
    parameters:
    - id: storageContext
      type: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext
      description: Contains an implementation of the storage context.
    content.vb: Public Sub New(storageContext As AzureBlobStorageContext)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId
  commentId: P:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId
  id: StorageId
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: StorageId
  nameWithType: AzureBlobStorageService.StorageId
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId
  type: Property
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: StorageId
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 88
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nGets or sets the storage identity for this service instance.\n"
  example: []
  syntax:
    content: public string StorageId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property StorageId As String
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.StorageId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath
  commentId: P:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath
  id: RootPath
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: RootPath
  nameWithType: AzureBlobStorageService.RootPath
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath
  type: Property
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: RootPath
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 93
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nGets or sets the root folder path for this service instance.\n"
  example: []
  syntax:
    content: public string RootPath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property RootPath As String
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.RootPath
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  id: Initialize(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: Initialize(AzureBlobStorageContext)
  nameWithType: AzureBlobStorageService.Initialize(AzureBlobStorageContext)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize(Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: Initialize
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 99
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to initialize a storage service with the specified settings provided within the <xref href=\"Talegen.Storage.Net.Core.IStorageContext\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public void Initialize(AzureBlobStorageContext storageContext)
    parameters:
    - id: storageContext
      type: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext
      description: Contains the settings used to initialize the storage service.
    content.vb: Public Sub Initialize(storageContext As AzureBlobStorageContext)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory(System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory(System.String,System.Boolean)
  id: CreateDirectory(System.String,System.Boolean)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: CreateDirectory(String, Boolean)
  nameWithType: AzureBlobStorageService.CreateDirectory(String, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: CreateDirectory
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 119
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to create a temporary directory within the Inspire application path.\n"
  example: []
  syntax:
    content: public string CreateDirectory(string subFolderName, bool silentExists = false)
    parameters:
    - id: subFolderName
      type: System.String
      description: Contains a sub-folder that will be included in the working directory path.
    - id: silentExists
      type: System.Boolean
      description: Contains a value indicating whether the method is silently return successfully if the folder path already exists.
    return:
      type: System.String
      description: Returns the name of the directory that was created.
    content.vb: Public Function CreateDirectory(subFolderName As String, silentExists As Boolean = False) As String
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory*
  exceptions:
  - type: Talegen.Storage.Net.Core.StorageException
    commentId: T:Talegen.Storage.Net.Core.StorageException
    description: This exception is thrown if the directory is unable to be created.
  implements:
  - Talegen.Storage.Net.Core.IStorageService.CreateDirectory(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
  id: DeleteDirectory(System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: DeleteDirectory(String, Boolean, Boolean)
  nameWithType: AzureBlobStorageService.DeleteDirectory(String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DeleteDirectory
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 158
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to delete a sub-folder directory and all of its files.\n"
  example: []
  syntax:
    content: public void DeleteDirectory(string subFolderName, bool recursive = true, bool silentNoExist = true)
    parameters:
    - id: subFolderName
      type: System.String
      description: Contains the sub-folder name of the directory off the root working folder that will be deleted.
    - id: recursive
      type: System.Boolean
      description: Delete all contents within the folder.
    - id: silentNoExist
      type: System.Boolean
      description: "\nContains a value indicating whether an exception is thrown if the target folder does not exist. Default is true; no exception is thrown if the\nfolder does not exist.\n"
    content.vb: Public Sub DeleteDirectory(subFolderName As String, recursive As Boolean = True, silentNoExist As Boolean = True)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory*
  exceptions:
  - type: Talegen.Storage.Net.Core.StorageException
    commentId: T:Talegen.Storage.Net.Core.StorageException
    description: This exception is thrown if the directory is unable to be deleted.
  implements:
  - Talegen.Storage.Net.Core.IStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory(System.String)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory(System.String)
  id: EmptyDirectory(System.String)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: EmptyDirectory(String)
  nameWithType: AzureBlobStorageService.EmptyDirectory(String)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory(System.String)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: EmptyDirectory
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 197
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to delete all directories and files inside of a sub-folder within the specified workspace root path, however the folder is left\nin place empty.\n"
  example: []
  syntax:
    content: public void EmptyDirectory(string subFolderName)
    parameters:
    - id: subFolderName
      type: System.String
      description: Contains the sub-folder within the within the specified workspace root path to empty.
    content.vb: Public Sub EmptyDirectory(subFolderName As String)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.EmptyDirectory(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String)
  id: ReadBinaryFile(System.String)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: ReadBinaryFile(String)
  nameWithType: AzureBlobStorageService.ReadBinaryFile(String)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: ReadBinaryFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 235
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to read all the bytes from a binary file.\n"
  example: []
  syntax:
    content: public byte[] ReadBinaryFile(string path)
    parameters:
    - id: path
      type: System.String
      description: Contains the path to the file to load and return.
    return:
      type: System.Byte[]
      description: Returns a byte array containing the binary bytes of the target file.
    content.vb: Public Function ReadBinaryFile(path As String) As Byte()
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String,System.IO.Stream)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String,System.IO.Stream)
  id: ReadBinaryFile(System.String,System.IO.Stream)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: ReadBinaryFile(String, Stream)
  nameWithType: AzureBlobStorageService.ReadBinaryFile(String, Stream)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile(System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: ReadBinaryFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 272
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to read all the bytes from a binary file to a provided stream.\n"
  example: []
  syntax:
    content: public void ReadBinaryFile(string path, Stream outputStream)
    parameters:
    - id: path
      type: System.String
      description: Contains the path to the file to load into the stream.
    - id: outputStream
      type: System.IO.Stream
      description: The stream to write the file to.
    content.vb: Public Sub ReadBinaryFile(path As String, outputStream As Stream)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String,System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile(System.String,System.Text.Encoding)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile(System.String,System.Text.Encoding)
  id: ReadTextFile(System.String,System.Text.Encoding)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: ReadTextFile(String, Encoding)
  nameWithType: AzureBlobStorageService.ReadTextFile(String, Encoding)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: ReadTextFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 314
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to read all the bytes from a text file.\n"
  example: []
  syntax:
    content: public string ReadTextFile(string path, Encoding encoding = null)
    parameters:
    - id: path
      type: System.String
      description: Contains the path to the file to load and return.
    - id: encoding
      type: System.Text.Encoding
      description: Contains the text encoding type. If none is specified, Encoding.Default is used.
    return:
      type: System.String
      description: Returns a string containing the content of the target file.
    content.vb: Public Function ReadTextFile(path As String, encoding As Encoding = Nothing) As String
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.ReadTextFile(System.String,System.Text.Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String,System.Byte[])
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String,System.Byte[])
  id: WriteBinaryFile(System.String,System.Byte[])
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: WriteBinaryFile(String, Byte[])
  nameWithType: AzureBlobStorageService.WriteBinaryFile(String, Byte[])
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: WriteBinaryFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 333
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to write content to the specified path.\n"
  example: []
  syntax:
    content: public bool WriteBinaryFile(string path, byte[] content)
    parameters:
    - id: path
      type: System.String
      description: Contains the fully qualified path, including file name, to the location in which the binary content shall be written.
    - id: content
      type: System.Byte[]
      description: Contains a byte array of the content to be written.
    return:
      type: System.Boolean
      description: Returns a value indicating whether the write was successful.
    content.vb: Public Function WriteBinaryFile(path As String, content As Byte()) As Boolean
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.Byte[])
  nameWithType.vb: AzureBlobStorageService.WriteBinaryFile(String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String, System.Byte())
  name.vb: WriteBinaryFile(String, Byte())
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String,System.IO.Stream)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String,System.IO.Stream)
  id: WriteBinaryFile(System.String,System.IO.Stream)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: WriteBinaryFile(String, Stream)
  nameWithType: AzureBlobStorageService.WriteBinaryFile(String, Stream)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile(System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: WriteBinaryFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 358
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to write content to the specified path.\n"
  example: []
  syntax:
    content: public bool WriteBinaryFile(string path, Stream inputStream)
    parameters:
    - id: path
      type: System.String
      description: Contains the fully qualified path, including file name, to the location in which the binary content shall be written.
    - id: inputStream
      type: System.IO.Stream
      description: Contains a stream of the content to be written.
    return:
      type: System.Boolean
      description: Returns a value indicating whether the write was successful.
    content.vb: Public Function WriteBinaryFile(path As String, inputStream As Stream) As Boolean
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
  id: WriteTextFile(System.String,System.String,System.Text.Encoding)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: WriteTextFile(String, String, Encoding)
  nameWithType: AzureBlobStorageService.WriteTextFile(String, String, Encoding)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile(System.String, System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: WriteTextFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 427
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to write content to the specified path.\n"
  example: []
  syntax:
    content: public bool WriteTextFile(string path, string content, Encoding encoding = null)
    parameters:
    - id: path
      type: System.String
      description: Contains the fully qualified path, including file name, to the location in which the text content shall be written.
    - id: content
      type: System.String
      description: Contains a string of the content to be written.
    - id: encoding
      type: System.Text.Encoding
      description: Contains the text file encoding. If none specified, Encoding.Default is used.
    return:
      type: System.Boolean
      description: Returns a value indicating whether the write was successful.
    content.vb: Public Function WriteTextFile(path As String, content As String, encoding As Encoding = Nothing) As Boolean
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists(System.String)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: DirectoryExists(String)
  nameWithType: AzureBlobStorageService.DirectoryExists(String)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists(System.String)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DirectoryExists
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 443
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nContains a value indicating whether the folder already exists.\n"
  example: []
  syntax:
    content: public bool DirectoryExists(string subFolderName)
    parameters:
    - id: subFolderName
      type: System.String
      description: Contains the sub-folder name excluding the root folder path.
    return:
      type: System.Boolean
      description: Returns a value indicating whether the directory exists.
    content.vb: Public Function DirectoryExists(subFolderName As String) As Boolean
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.DirectoryExists(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists(System.String)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists(System.String)
  id: FileExists(System.String)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: FileExists(String)
  nameWithType: AzureBlobStorageService.FileExists(String)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists(System.String)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: FileExists
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 461
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nContains a value indicating whether the file exists.\n"
  example: []
  syntax:
    content: public bool FileExists(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: Contains the sub-folder path and file name excluding the root folder path to determine if exists.
    return:
      type: System.Boolean
      description: Returns a value indicating whether the file exists.
    content.vb: Public Function FileExists(filePath As String) As Boolean
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.FileExists(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
  id: DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: DeleteFiles(List<String>, Boolean)
  nameWithType: AzureBlobStorageService.DeleteFiles(List<String>, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles(System.Collections.Generic.List<System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DeleteFiles
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 494
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nDeletes the files.\n"
  example: []
  syntax:
    content: public void DeleteFiles(List<string> filePathNames, bool deleteFolders = false)
    parameters:
    - id: filePathNames
      type: System.Collections.Generic.List{System.String}
      description: The file path names.
    - id: deleteFolders
      type: System.Boolean
      description: if set to <code>true</code> [delete folders].
    content.vb: Public Sub DeleteFiles(filePathNames As List(Of String), deleteFolders As Boolean = False)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
  implements:
  - Talegen.Storage.Net.Core.IStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
  nameWithType.vb: AzureBlobStorageService.DeleteFiles(List(Of String), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles(System.Collections.Generic.List(Of System.String), System.Boolean)
  name.vb: DeleteFiles(List(Of String), Boolean)
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile(System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile(System.String,System.Boolean)
  id: DeleteFile(System.String,System.Boolean)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: DeleteFile(String, Boolean)
  nameWithType: AzureBlobStorageService.DeleteFile(String, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: DeleteFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 507
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to delete a file.\n"
  example: []
  syntax:
    content: public void DeleteFile(string filePath, bool deleteDirectory = false)
    parameters:
    - id: filePath
      type: System.String
      description: Contains a the path to the file that will be deleted.
    - id: deleteDirectory
      type: System.Boolean
      description: "\nContains a value indicating whether the directory the file is within will be deleted. This will only occur if no other files remain in the directory\nafter the list of files have been deleted.\n"
    content.vb: Public Sub DeleteFile(filePath As String, deleteDirectory As Boolean = False)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.DeleteFile(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile(System.String,System.String,System.Boolean)
  id: CopyFile(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: CopyFile(String, String, Boolean)
  nameWithType: AzureBlobStorageService.CopyFile(String, String, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: CopyFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 535
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to copy a file.\n"
  example: []
  syntax:
    content: public void CopyFile(string sourceFilePath, string targetFilePath, bool overwrite = true)
    parameters:
    - id: sourceFilePath
      type: System.String
      description: Contains a the path to the file that will be copied.
    - id: targetFilePath
      type: System.String
      description: Contains the path to the target where the file is to be copied.
    - id: overwrite
      type: System.Boolean
      description: Contains a value indicating if the target should be overwritten if it already exists. Default is true.
    content.vb: Public Sub CopyFile(sourceFilePath As String, targetFilePath As String, overwrite As Boolean = True)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.CopyFile(System.String,System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile(System.String,System.String,System.Boolean)
  id: MoveFile(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: MoveFile(String, String, Boolean)
  nameWithType: AzureBlobStorageService.MoveFile(String, String, Boolean)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: MoveFile
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 559
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to move a file.\n"
  example: []
  syntax:
    content: public void MoveFile(string sourceFilePath, string targetFilePath, bool overwrite = true)
    parameters:
    - id: sourceFilePath
      type: System.String
      description: Contains a the path to the file that will be moved.
    - id: targetFilePath
      type: System.String
      description: Contains the path to the target where the file is to be moved.
    - id: overwrite
      type: System.Boolean
      description: Contains a value indicating if the target should be overwritten if it already exists. Default is true.
    content.vb: Public Sub MoveFile(sourceFilePath As String, targetFilePath As String, overwrite As Boolean = True)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.MoveFile(System.String,System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash(System.String)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash(System.String)
  id: FileHash(System.String)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: FileHash(String)
  nameWithType: AzureBlobStorageService.FileHash(String)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash(System.String)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: FileHash
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 583
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to create a hash of the file contents.\n"
  example: []
  syntax:
    content: public string FileHash(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file.
    return:
      type: System.String
      description: Returns a hash of the file contents.
    content.vb: Public Function FileHash(filePath As String) As String
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
  implements:
  - Talegen.Storage.Net.Core.IStorageService.FileHash(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
  commentId: M:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
  id: FindFiles(System.String,System.String,System.IO.SearchOption)
  parent: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  langs:
  - csharp
  - vb
  name: FindFiles(String, String, SearchOption)
  nameWithType: AzureBlobStorageService.FindFiles(String, String, SearchOption)
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles(System.String, System.String, System.IO.SearchOption)
  type: Method
  source:
    remote:
      path: src/Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.Storage.Net.git
    id: FindFiles
    path: ../Talegen.Storage.Net.AzureBlobs/AzureBlobStorageService.cs
    startLine: 595
  assemblies:
  - Talegen.Storage.Net.AzureBlobs
  namespace: Talegen.Storage.Net.AzureBlobs
  summary: "\nThis method is used to get the files from a directory.\n"
  example: []
  syntax:
    content: public List<string> FindFiles(string subFolderName, string searchPattern = "*.*", SearchOption searchOption = SearchOption.AllDirectories)
    parameters:
    - id: subFolderName
      type: System.String
      description: Contains the directory name to get the files.
    - id: searchPattern
      type: System.String
      description: Contains an optional file name search pattern. If not specified, *.* is used.
    - id: searchOption
      type: System.IO.SearchOption
      description: Contains search options. If not specified, all sub-folders are searched for the file pattern.
    return:
      type: System.Collections.Generic.List{System.String}
      description: Returns a list of files in the directory path.
    content.vb: Public Function FindFiles(subFolderName As String, searchPattern As String = "*.*", searchOption As SearchOption = SearchOption.AllDirectories) As List(Of String)
  overload: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles*
  implements:
  - Talegen.Storage.Net.Core.IStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Talegen.Storage.Net.AzureBlobs
  commentId: N:Talegen.Storage.Net.AzureBlobs
  name: Talegen.Storage.Net.AzureBlobs
  nameWithType: Talegen.Storage.Net.AzureBlobs
  fullName: Talegen.Storage.Net.AzureBlobs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Talegen.Storage.Net.Core.IStorageService
  commentId: T:Talegen.Storage.Net.Core.IStorageService
  parent: Talegen.Storage.Net.Core
  name: IStorageService
  nameWithType: IStorageService
  fullName: Talegen.Storage.Net.Core.IStorageService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Talegen.Storage.Net.Core
  commentId: N:Talegen.Storage.Net.Core
  name: Talegen.Storage.Net.Core
  nameWithType: Talegen.Storage.Net.Core
  fullName: Talegen.Storage.Net.Core
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  commentId: T:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
  name: AzureBlobStorageService
  nameWithType: AzureBlobStorageService
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.#ctor
  name: AzureBlobStorageService
  nameWithType: AzureBlobStorageService.AzureBlobStorageService
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.AzureBlobStorageService
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext
  commentId: T:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext
  parent: Talegen.Storage.Net.AzureBlobs
  name: AzureBlobStorageContext
  nameWithType: AzureBlobStorageContext
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageContext
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId
  name: StorageId
  nameWithType: AzureBlobStorageService.StorageId
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.StorageId
- uid: Talegen.Storage.Net.Core.IStorageService.StorageId
  commentId: P:Talegen.Storage.Net.Core.IStorageService.StorageId
  parent: Talegen.Storage.Net.Core.IStorageService
  name: StorageId
  nameWithType: IStorageService.StorageId
  fullName: Talegen.Storage.Net.Core.IStorageService.StorageId
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath
  name: RootPath
  nameWithType: AzureBlobStorageService.RootPath
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.RootPath
- uid: Talegen.Storage.Net.Core.IStorageService.RootPath
  commentId: P:Talegen.Storage.Net.Core.IStorageService.RootPath
  parent: Talegen.Storage.Net.Core.IStorageService
  name: RootPath
  nameWithType: IStorageService.RootPath
  fullName: Talegen.Storage.Net.Core.IStorageService.RootPath
- uid: Talegen.Storage.Net.Core.IStorageContext
  commentId: T:Talegen.Storage.Net.Core.IStorageContext
  parent: Talegen.Storage.Net.Core
  name: IStorageContext
  nameWithType: IStorageContext
  fullName: Talegen.Storage.Net.Core.IStorageContext
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize
  name: Initialize
  nameWithType: AzureBlobStorageService.Initialize
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.Initialize
- uid: Talegen.Storage.Net.Core.StorageException
  commentId: T:Talegen.Storage.Net.Core.StorageException
  name: StorageException
  nameWithType: StorageException
  fullName: Talegen.Storage.Net.Core.StorageException
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory
  name: CreateDirectory
  nameWithType: AzureBlobStorageService.CreateDirectory
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CreateDirectory
- uid: Talegen.Storage.Net.Core.IStorageService.CreateDirectory(System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.CreateDirectory(System.String,System.Boolean)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: CreateDirectory(String, Boolean)
  nameWithType: IStorageService.CreateDirectory(String, Boolean)
  fullName: Talegen.Storage.Net.Core.IStorageService.CreateDirectory(System.String, System.Boolean)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.CreateDirectory(System.String,System.Boolean)
    name: CreateDirectory
    nameWithType: IStorageService.CreateDirectory
    fullName: Talegen.Storage.Net.Core.IStorageService.CreateDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.CreateDirectory(System.String,System.Boolean)
    name: CreateDirectory
    nameWithType: IStorageService.CreateDirectory
    fullName: Talegen.Storage.Net.Core.IStorageService.CreateDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory
  name: DeleteDirectory
  nameWithType: AzureBlobStorageService.DeleteDirectory
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteDirectory
- uid: Talegen.Storage.Net.Core.IStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: DeleteDirectory(String, Boolean, Boolean)
  nameWithType: IStorageService.DeleteDirectory(String, Boolean, Boolean)
  fullName: Talegen.Storage.Net.Core.IStorageService.DeleteDirectory(System.String, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
    name: DeleteDirectory
    nameWithType: IStorageService.DeleteDirectory
    fullName: Talegen.Storage.Net.Core.IStorageService.DeleteDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.DeleteDirectory(System.String,System.Boolean,System.Boolean)
    name: DeleteDirectory
    nameWithType: IStorageService.DeleteDirectory
    fullName: Talegen.Storage.Net.Core.IStorageService.DeleteDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory
  name: EmptyDirectory
  nameWithType: AzureBlobStorageService.EmptyDirectory
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.EmptyDirectory
- uid: Talegen.Storage.Net.Core.IStorageService.EmptyDirectory(System.String)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.EmptyDirectory(System.String)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: EmptyDirectory(String)
  nameWithType: IStorageService.EmptyDirectory(String)
  fullName: Talegen.Storage.Net.Core.IStorageService.EmptyDirectory(System.String)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.EmptyDirectory(System.String)
    name: EmptyDirectory
    nameWithType: IStorageService.EmptyDirectory
    fullName: Talegen.Storage.Net.Core.IStorageService.EmptyDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.EmptyDirectory(System.String)
    name: EmptyDirectory
    nameWithType: IStorageService.EmptyDirectory
    fullName: Talegen.Storage.Net.Core.IStorageService.EmptyDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile
  name: ReadBinaryFile
  nameWithType: AzureBlobStorageService.ReadBinaryFile
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadBinaryFile
- uid: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: ReadBinaryFile(String)
  nameWithType: IStorageService.ReadBinaryFile(String)
  fullName: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String)
    name: ReadBinaryFile
    nameWithType: IStorageService.ReadBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String)
    name: ReadBinaryFile
    nameWithType: IStorageService.ReadBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String,System.IO.Stream)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String,System.IO.Stream)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: ReadBinaryFile(String, Stream)
  nameWithType: IStorageService.ReadBinaryFile(String, Stream)
  fullName: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String, System.IO.Stream)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String,System.IO.Stream)
    name: ReadBinaryFile
    nameWithType: IStorageService.ReadBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile(System.String,System.IO.Stream)
    name: ReadBinaryFile
    nameWithType: IStorageService.ReadBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.ReadBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile
  name: ReadTextFile
  nameWithType: AzureBlobStorageService.ReadTextFile
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.ReadTextFile
- uid: Talegen.Storage.Net.Core.IStorageService.ReadTextFile(System.String,System.Text.Encoding)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.ReadTextFile(System.String,System.Text.Encoding)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: ReadTextFile(String, Encoding)
  nameWithType: IStorageService.ReadTextFile(String, Encoding)
  fullName: Talegen.Storage.Net.Core.IStorageService.ReadTextFile(System.String, System.Text.Encoding)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.ReadTextFile(System.String,System.Text.Encoding)
    name: ReadTextFile
    nameWithType: IStorageService.ReadTextFile
    fullName: Talegen.Storage.Net.Core.IStorageService.ReadTextFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.ReadTextFile(System.String,System.Text.Encoding)
    name: ReadTextFile
    nameWithType: IStorageService.ReadTextFile
    fullName: Talegen.Storage.Net.Core.IStorageService.ReadTextFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile
  name: WriteBinaryFile
  nameWithType: AzureBlobStorageService.WriteBinaryFile
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteBinaryFile
- uid: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.Byte[])
  commentId: M:Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.Byte[])
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: WriteBinaryFile(String, Byte[])
  nameWithType: IStorageService.WriteBinaryFile(String, Byte[])
  fullName: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String, System.Byte[])
  nameWithType.vb: IStorageService.WriteBinaryFile(String, Byte())
  fullName.vb: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String, System.Byte())
  name.vb: WriteBinaryFile(String, Byte())
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.Byte[])
    name: WriteBinaryFile
    nameWithType: IStorageService.WriteBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.Byte[])
    name: WriteBinaryFile
    nameWithType: IStorageService.WriteBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.IO.Stream)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.IO.Stream)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: WriteBinaryFile(String, Stream)
  nameWithType: IStorageService.WriteBinaryFile(String, Stream)
  fullName: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String, System.IO.Stream)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.IO.Stream)
    name: WriteBinaryFile
    nameWithType: IStorageService.WriteBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile(System.String,System.IO.Stream)
    name: WriteBinaryFile
    nameWithType: IStorageService.WriteBinaryFile
    fullName: Talegen.Storage.Net.Core.IStorageService.WriteBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile
  name: WriteTextFile
  nameWithType: AzureBlobStorageService.WriteTextFile
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.WriteTextFile
- uid: Talegen.Storage.Net.Core.IStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: WriteTextFile(String, String, Encoding)
  nameWithType: IStorageService.WriteTextFile(String, String, Encoding)
  fullName: Talegen.Storage.Net.Core.IStorageService.WriteTextFile(System.String, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
    name: WriteTextFile
    nameWithType: IStorageService.WriteTextFile
    fullName: Talegen.Storage.Net.Core.IStorageService.WriteTextFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.WriteTextFile(System.String,System.String,System.Text.Encoding)
    name: WriteTextFile
    nameWithType: IStorageService.WriteTextFile
    fullName: Talegen.Storage.Net.Core.IStorageService.WriteTextFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists
  name: DirectoryExists
  nameWithType: AzureBlobStorageService.DirectoryExists
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DirectoryExists
- uid: Talegen.Storage.Net.Core.IStorageService.DirectoryExists(System.String)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.DirectoryExists(System.String)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: DirectoryExists(String)
  nameWithType: IStorageService.DirectoryExists(String)
  fullName: Talegen.Storage.Net.Core.IStorageService.DirectoryExists(System.String)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.DirectoryExists(System.String)
    name: DirectoryExists
    nameWithType: IStorageService.DirectoryExists
    fullName: Talegen.Storage.Net.Core.IStorageService.DirectoryExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.DirectoryExists(System.String)
    name: DirectoryExists
    nameWithType: IStorageService.DirectoryExists
    fullName: Talegen.Storage.Net.Core.IStorageService.DirectoryExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists
  name: FileExists
  nameWithType: AzureBlobStorageService.FileExists
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileExists
- uid: Talegen.Storage.Net.Core.IStorageService.FileExists(System.String)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.FileExists(System.String)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: FileExists(String)
  nameWithType: IStorageService.FileExists(String)
  fullName: Talegen.Storage.Net.Core.IStorageService.FileExists(System.String)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.FileExists(System.String)
    name: FileExists
    nameWithType: IStorageService.FileExists
    fullName: Talegen.Storage.Net.Core.IStorageService.FileExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.FileExists(System.String)
    name: FileExists
    nameWithType: IStorageService.FileExists
    fullName: Talegen.Storage.Net.Core.IStorageService.FileExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles
  name: DeleteFiles
  nameWithType: AzureBlobStorageService.DeleteFiles
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFiles
- uid: Talegen.Storage.Net.Core.IStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: DeleteFiles(List<String>, Boolean)
  nameWithType: IStorageService.DeleteFiles(List<String>, Boolean)
  fullName: Talegen.Storage.Net.Core.IStorageService.DeleteFiles(System.Collections.Generic.List<System.String>, System.Boolean)
  nameWithType.vb: IStorageService.DeleteFiles(List(Of String), Boolean)
  fullName.vb: Talegen.Storage.Net.Core.IStorageService.DeleteFiles(System.Collections.Generic.List(Of System.String), System.Boolean)
  name.vb: DeleteFiles(List(Of String), Boolean)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
    name: DeleteFiles
    nameWithType: IStorageService.DeleteFiles
    fullName: Talegen.Storage.Net.Core.IStorageService.DeleteFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.DeleteFiles(System.Collections.Generic.List{System.String},System.Boolean)
    name: DeleteFiles
    nameWithType: IStorageService.DeleteFiles
    fullName: Talegen.Storage.Net.Core.IStorageService.DeleteFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile
  name: DeleteFile
  nameWithType: AzureBlobStorageService.DeleteFile
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.DeleteFile
- uid: Talegen.Storage.Net.Core.IStorageService.DeleteFile(System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.DeleteFile(System.String,System.Boolean)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: DeleteFile(String, Boolean)
  nameWithType: IStorageService.DeleteFile(String, Boolean)
  fullName: Talegen.Storage.Net.Core.IStorageService.DeleteFile(System.String, System.Boolean)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.DeleteFile(System.String,System.Boolean)
    name: DeleteFile
    nameWithType: IStorageService.DeleteFile
    fullName: Talegen.Storage.Net.Core.IStorageService.DeleteFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.DeleteFile(System.String,System.Boolean)
    name: DeleteFile
    nameWithType: IStorageService.DeleteFile
    fullName: Talegen.Storage.Net.Core.IStorageService.DeleteFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile
  name: CopyFile
  nameWithType: AzureBlobStorageService.CopyFile
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.CopyFile
- uid: Talegen.Storage.Net.Core.IStorageService.CopyFile(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.CopyFile(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: CopyFile(String, String, Boolean)
  nameWithType: IStorageService.CopyFile(String, String, Boolean)
  fullName: Talegen.Storage.Net.Core.IStorageService.CopyFile(System.String, System.String, System.Boolean)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.CopyFile(System.String,System.String,System.Boolean)
    name: CopyFile
    nameWithType: IStorageService.CopyFile
    fullName: Talegen.Storage.Net.Core.IStorageService.CopyFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.CopyFile(System.String,System.String,System.Boolean)
    name: CopyFile
    nameWithType: IStorageService.CopyFile
    fullName: Talegen.Storage.Net.Core.IStorageService.CopyFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile
  name: MoveFile
  nameWithType: AzureBlobStorageService.MoveFile
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.MoveFile
- uid: Talegen.Storage.Net.Core.IStorageService.MoveFile(System.String,System.String,System.Boolean)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.MoveFile(System.String,System.String,System.Boolean)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: MoveFile(String, String, Boolean)
  nameWithType: IStorageService.MoveFile(String, String, Boolean)
  fullName: Talegen.Storage.Net.Core.IStorageService.MoveFile(System.String, System.String, System.Boolean)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.MoveFile(System.String,System.String,System.Boolean)
    name: MoveFile
    nameWithType: IStorageService.MoveFile
    fullName: Talegen.Storage.Net.Core.IStorageService.MoveFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.MoveFile(System.String,System.String,System.Boolean)
    name: MoveFile
    nameWithType: IStorageService.MoveFile
    fullName: Talegen.Storage.Net.Core.IStorageService.MoveFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash
  name: FileHash
  nameWithType: AzureBlobStorageService.FileHash
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FileHash
- uid: Talegen.Storage.Net.Core.IStorageService.FileHash(System.String)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.FileHash(System.String)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: FileHash(String)
  nameWithType: IStorageService.FileHash(String)
  fullName: Talegen.Storage.Net.Core.IStorageService.FileHash(System.String)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.FileHash(System.String)
    name: FileHash
    nameWithType: IStorageService.FileHash
    fullName: Talegen.Storage.Net.Core.IStorageService.FileHash
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.FileHash(System.String)
    name: FileHash
    nameWithType: IStorageService.FileHash
    fullName: Talegen.Storage.Net.Core.IStorageService.FileHash
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles*
  commentId: Overload:Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles
  name: FindFiles
  nameWithType: AzureBlobStorageService.FindFiles
  fullName: Talegen.Storage.Net.AzureBlobs.AzureBlobStorageService.FindFiles
- uid: Talegen.Storage.Net.Core.IStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
  commentId: M:Talegen.Storage.Net.Core.IStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
  parent: Talegen.Storage.Net.Core.IStorageService
  isExternal: true
  name: FindFiles(String, String, SearchOption)
  nameWithType: IStorageService.FindFiles(String, String, SearchOption)
  fullName: Talegen.Storage.Net.Core.IStorageService.FindFiles(System.String, System.String, System.IO.SearchOption)
  spec.csharp:
  - uid: Talegen.Storage.Net.Core.IStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
    name: FindFiles
    nameWithType: IStorageService.FindFiles
    fullName: Talegen.Storage.Net.Core.IStorageService.FindFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SearchOption
    name: SearchOption
    nameWithType: SearchOption
    fullName: System.IO.SearchOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Talegen.Storage.Net.Core.IStorageService.FindFiles(System.String,System.String,System.IO.SearchOption)
    name: FindFiles
    nameWithType: IStorageService.FindFiles
    fullName: Talegen.Storage.Net.Core.IStorageService.FindFiles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SearchOption
    name: SearchOption
    nameWithType: SearchOption
    fullName: System.IO.SearchOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.SearchOption
  commentId: T:System.IO.SearchOption
  parent: System.IO
  isExternal: true
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
